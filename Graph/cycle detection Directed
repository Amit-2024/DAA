#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    bool dfs(int source, vector<int>adj[], vector<bool>&visited, vector<bool>&order)
    {
        visited[source]=true;
        order[source]=true;
        
        for(auto it: adj[source])
        {
            if(!visited[it])
            {
                bool x = dfs(it,adj,visited,order);
                if(x==true)
                return true;
            }
            else if(order[it]==true)
            return true;
        }
        order[source]=false;
        return false;
    }
    
    bool isCyclic(int V, vector<int> adj[]) {
        vector<bool>visited(V,false);
        vector<bool>order(V,false);
        
        for(int i=0; i<V;i++)
        {
            if(!visited[i]){
            bool f = dfs(i,adj,visited,order);
            if(f==true)
            return true;
            }
        }
        return false;
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends
